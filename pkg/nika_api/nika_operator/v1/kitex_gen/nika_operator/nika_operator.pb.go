// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: nika_operator.proto

package nika_operator

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant             string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	UserName           string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	UserID             uint64 `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	ApiServer          string `protobuf:"bytes,4,opt,name=ApiServer,proto3" json:"ApiServer,omitempty"`
	Token              string `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
	CA                 string `protobuf:"bytes,6,opt,name=CA,proto3" json:"CA,omitempty"`
	HelmRepositoryName string `protobuf:"bytes,7,opt,name=HelmRepositoryName,proto3" json:"HelmRepositoryName,omitempty"`
	HelmRepositoryURL  string `protobuf:"bytes,8,opt,name=HelmRepositoryURL,proto3" json:"HelmRepositoryURL,omitempty"`
	Namespace          string `protobuf:"bytes,9,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Release            string `protobuf:"bytes,10,opt,name=Release,proto3" json:"Release,omitempty"`
	Chart              string `protobuf:"bytes,11,opt,name=Chart,proto3" json:"Chart,omitempty"`
	ReleaseValues      string `protobuf:"bytes,12,opt,name=ReleaseValues,proto3" json:"ReleaseValues,omitempty"`
	EnvName            string `protobuf:"bytes,13,opt,name=EnvName,proto3" json:"EnvName,omitempty"`
	EnvValues          string `protobuf:"bytes,14,opt,name=EnvValues,proto3" json:"EnvValues,omitempty"`
	Cmd                string `protobuf:"bytes,15,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Log                string `protobuf:"bytes,16,opt,name=Log,proto3" json:"Log,omitempty"`
	Debug              bool   `protobuf:"varint,17,opt,name=Debug,proto3" json:"Debug,omitempty"`
	NickName           string `protobuf:"bytes,18,opt,name=nickName,proto3" json:"nickName,omitempty"`
	ApplicationName    string `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ApplicationID      uint64 `protobuf:"varint,20,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_operator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_operator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_nika_operator_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ApplyRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ApplyRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ApplyRequest) GetApiServer() string {
	if x != nil {
		return x.ApiServer
	}
	return ""
}

func (x *ApplyRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApplyRequest) GetCA() string {
	if x != nil {
		return x.CA
	}
	return ""
}

func (x *ApplyRequest) GetHelmRepositoryName() string {
	if x != nil {
		return x.HelmRepositoryName
	}
	return ""
}

func (x *ApplyRequest) GetHelmRepositoryURL() string {
	if x != nil {
		return x.HelmRepositoryURL
	}
	return ""
}

func (x *ApplyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ApplyRequest) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *ApplyRequest) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *ApplyRequest) GetReleaseValues() string {
	if x != nil {
		return x.ReleaseValues
	}
	return ""
}

func (x *ApplyRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *ApplyRequest) GetEnvValues() string {
	if x != nil {
		return x.EnvValues
	}
	return ""
}

func (x *ApplyRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *ApplyRequest) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ApplyRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *ApplyRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ApplyRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplyRequest) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

type ApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeployRecordID uint64 `protobuf:"varint,1,opt,name=DeployRecordID,proto3" json:"DeployRecordID,omitempty"`
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_operator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_operator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_nika_operator_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyResponse) GetDeployRecordID() uint64 {
	if x != nil {
		return x.DeployRecordID
	}
	return 0
}

var File_nika_operator_proto protoreflect.FileDescriptor

var file_nika_operator_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x04, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x41, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x43, 0x41, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x76, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x76, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43,
	0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32,
	0x38, 0x0a, 0x0c, 0x4e, 0x69, 0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0d, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x5a, 0x5c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6f, 0x6c, 0x75, 0x6e, 0x6c, 0x2f,
	0x6e, 0x69, 0x6b, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x6b, 0x61,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_nika_operator_proto_rawDescOnce sync.Once
	file_nika_operator_proto_rawDescData = file_nika_operator_proto_rawDesc
)

func file_nika_operator_proto_rawDescGZIP() []byte {
	file_nika_operator_proto_rawDescOnce.Do(func() {
		file_nika_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_nika_operator_proto_rawDescData)
	})
	return file_nika_operator_proto_rawDescData
}

var file_nika_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nika_operator_proto_goTypes = []interface{}{
	(*ApplyRequest)(nil),  // 0: ApplyRequest
	(*ApplyResponse)(nil), // 1: ApplyResponse
}
var file_nika_operator_proto_depIdxs = []int32{
	0, // 0: NikaOperator.Apply:input_type -> ApplyRequest
	1, // 1: NikaOperator.Apply:output_type -> ApplyResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nika_operator_proto_init() }
func file_nika_operator_proto_init() {
	if File_nika_operator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nika_operator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_operator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nika_operator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nika_operator_proto_goTypes,
		DependencyIndexes: file_nika_operator_proto_depIdxs,
		MessageInfos:      file_nika_operator_proto_msgTypes,
	}.Build()
	File_nika_operator_proto = out.File
	file_nika_operator_proto_rawDesc = nil
	file_nika_operator_proto_goTypes = nil
	file_nika_operator_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.2.1. DO NOT EDIT.

type NikaOperator interface {
	Apply(ctx context.Context, req *ApplyRequest) (res *ApplyResponse, err error)
}
