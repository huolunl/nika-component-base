// Code generated by Kitex v0.2.1. DO NOT EDIT.

package nikaoperator

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/huolunl/nika-component-base/pkg/nika_api/nika_operator/v1/kitex_gen/nika_operator"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return nikaOperatorServiceInfo
}

var nikaOperatorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NikaOperator"
	handlerType := (*nika_operator.NikaOperator)(nil)
	methods := map[string]kitex.MethodInfo{
		"Apply": kitex.NewMethodInfo(applyHandler, newApplyArgs, newApplyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func applyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_operator.ApplyRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_operator.NikaOperator).Apply(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ApplyArgs:
		success, err := handler.(nika_operator.NikaOperator).Apply(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ApplyResult)
		realResult.Success = success
	}
	return nil
}
func newApplyArgs() interface{} {
	return &ApplyArgs{}
}

func newApplyResult() interface{} {
	return &ApplyResult{}
}

type ApplyArgs struct {
	Req *nika_operator.ApplyRequest
}

func (p *ApplyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ApplyArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ApplyArgs) Unmarshal(in []byte) error {
	msg := new(nika_operator.ApplyRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ApplyArgs_Req_DEFAULT *nika_operator.ApplyRequest

func (p *ApplyArgs) GetReq() *nika_operator.ApplyRequest {
	if !p.IsSetReq() {
		return ApplyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

type ApplyResult struct {
	Success *nika_operator.ApplyResponse
}

var ApplyResult_Success_DEFAULT *nika_operator.ApplyResponse

func (p *ApplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ApplyResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ApplyResult) Unmarshal(in []byte) error {
	msg := new(nika_operator.ApplyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ApplyResult) GetSuccess() *nika_operator.ApplyResponse {
	if !p.IsSetSuccess() {
		return ApplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_operator.ApplyResponse)
}

func (p *ApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Apply(ctx context.Context, Req *nika_operator.ApplyRequest) (r *nika_operator.ApplyResponse, err error) {
	var _args ApplyArgs
	_args.Req = Req
	var _result ApplyResult
	if err = p.c.Call(ctx, "Apply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
