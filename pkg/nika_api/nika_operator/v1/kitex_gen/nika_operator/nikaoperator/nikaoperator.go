// Code generated by Kitex v0.2.1. DO NOT EDIT.

package nikaoperator

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/huolunl/nika-component-base/pkg/nika_api/nika_operator/v1/kitex_gen/nika_operator"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return nikaOperatorServiceInfo
}

var nikaOperatorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NikaOperator"
	handlerType := (*nika_operator.NikaOperator)(nil)
	methods := map[string]kitex.MethodInfo{
		"Exec":                                  kitex.NewMethodInfo(execHandler, newExecArgs, newExecResult, false),
		"GetExecRecord":                         kitex.NewMethodInfo(getExecRecordHandler, newGetExecRecordArgs, newGetExecRecordResult, false),
		"ListExecRecordByAppIDAndEnvNameAndCmd": kitex.NewMethodInfo(listExecRecordByAppIDAndEnvNameAndCmdHandler, newListExecRecordByAppIDAndEnvNameAndCmdArgs, newListExecRecordByAppIDAndEnvNameAndCmdResult, false),
		"ListKubernetesAPIObject":               kitex.NewMethodInfo(listKubernetesAPIObjectHandler, newListKubernetesAPIObjectArgs, newListKubernetesAPIObjectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func execHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_operator.ExecRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_operator.NikaOperator).Exec(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ExecArgs:
		success, err := handler.(nika_operator.NikaOperator).Exec(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ExecResult)
		realResult.Success = success
	}
	return nil
}
func newExecArgs() interface{} {
	return &ExecArgs{}
}

func newExecResult() interface{} {
	return &ExecResult{}
}

type ExecArgs struct {
	Req *nika_operator.ExecRequest
}

func (p *ExecArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ExecArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ExecArgs) Unmarshal(in []byte) error {
	msg := new(nika_operator.ExecRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ExecArgs_Req_DEFAULT *nika_operator.ExecRequest

func (p *ExecArgs) GetReq() *nika_operator.ExecRequest {
	if !p.IsSetReq() {
		return ExecArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ExecArgs) IsSetReq() bool {
	return p.Req != nil
}

type ExecResult struct {
	Success *nika_operator.ExecResponse
}

var ExecResult_Success_DEFAULT *nika_operator.ExecResponse

func (p *ExecResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ExecResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ExecResult) Unmarshal(in []byte) error {
	msg := new(nika_operator.ExecResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ExecResult) GetSuccess() *nika_operator.ExecResponse {
	if !p.IsSetSuccess() {
		return ExecResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ExecResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_operator.ExecResponse)
}

func (p *ExecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getExecRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_operator.GetExecRecordRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_operator.NikaOperator).GetExecRecord(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetExecRecordArgs:
		success, err := handler.(nika_operator.NikaOperator).GetExecRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetExecRecordResult)
		realResult.Success = success
	}
	return nil
}
func newGetExecRecordArgs() interface{} {
	return &GetExecRecordArgs{}
}

func newGetExecRecordResult() interface{} {
	return &GetExecRecordResult{}
}

type GetExecRecordArgs struct {
	Req *nika_operator.GetExecRecordRequest
}

func (p *GetExecRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetExecRecordArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetExecRecordArgs) Unmarshal(in []byte) error {
	msg := new(nika_operator.GetExecRecordRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetExecRecordArgs_Req_DEFAULT *nika_operator.GetExecRecordRequest

func (p *GetExecRecordArgs) GetReq() *nika_operator.GetExecRecordRequest {
	if !p.IsSetReq() {
		return GetExecRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetExecRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetExecRecordResult struct {
	Success *nika_operator.GetExecRecordResponse
}

var GetExecRecordResult_Success_DEFAULT *nika_operator.GetExecRecordResponse

func (p *GetExecRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetExecRecordResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetExecRecordResult) Unmarshal(in []byte) error {
	msg := new(nika_operator.GetExecRecordResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetExecRecordResult) GetSuccess() *nika_operator.GetExecRecordResponse {
	if !p.IsSetSuccess() {
		return GetExecRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetExecRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_operator.GetExecRecordResponse)
}

func (p *GetExecRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listExecRecordByAppIDAndEnvNameAndCmdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_operator.NikaOperator).ListExecRecordByAppIDAndEnvNameAndCmd(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListExecRecordByAppIDAndEnvNameAndCmdArgs:
		success, err := handler.(nika_operator.NikaOperator).ListExecRecordByAppIDAndEnvNameAndCmd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListExecRecordByAppIDAndEnvNameAndCmdResult)
		realResult.Success = success
	}
	return nil
}
func newListExecRecordByAppIDAndEnvNameAndCmdArgs() interface{} {
	return &ListExecRecordByAppIDAndEnvNameAndCmdArgs{}
}

func newListExecRecordByAppIDAndEnvNameAndCmdResult() interface{} {
	return &ListExecRecordByAppIDAndEnvNameAndCmdResult{}
}

type ListExecRecordByAppIDAndEnvNameAndCmdArgs struct {
	Req *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListExecRecordByAppIDAndEnvNameAndCmdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdArgs) Unmarshal(in []byte) error {
	msg := new(nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListExecRecordByAppIDAndEnvNameAndCmdArgs_Req_DEFAULT *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest

func (p *ListExecRecordByAppIDAndEnvNameAndCmdArgs) GetReq() *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest {
	if !p.IsSetReq() {
		return ListExecRecordByAppIDAndEnvNameAndCmdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListExecRecordByAppIDAndEnvNameAndCmdResult struct {
	Success *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse
}

var ListExecRecordByAppIDAndEnvNameAndCmdResult_Success_DEFAULT *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse

func (p *ListExecRecordByAppIDAndEnvNameAndCmdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListExecRecordByAppIDAndEnvNameAndCmdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdResult) Unmarshal(in []byte) error {
	msg := new(nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdResult) GetSuccess() *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse {
	if !p.IsSetSuccess() {
		return ListExecRecordByAppIDAndEnvNameAndCmdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse)
}

func (p *ListExecRecordByAppIDAndEnvNameAndCmdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listKubernetesAPIObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_operator.ListKubernetesAPIObjectRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_operator.NikaOperator).ListKubernetesAPIObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListKubernetesAPIObjectArgs:
		success, err := handler.(nika_operator.NikaOperator).ListKubernetesAPIObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListKubernetesAPIObjectResult)
		realResult.Success = success
	}
	return nil
}
func newListKubernetesAPIObjectArgs() interface{} {
	return &ListKubernetesAPIObjectArgs{}
}

func newListKubernetesAPIObjectResult() interface{} {
	return &ListKubernetesAPIObjectResult{}
}

type ListKubernetesAPIObjectArgs struct {
	Req *nika_operator.ListKubernetesAPIObjectRequest
}

func (p *ListKubernetesAPIObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListKubernetesAPIObjectArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListKubernetesAPIObjectArgs) Unmarshal(in []byte) error {
	msg := new(nika_operator.ListKubernetesAPIObjectRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListKubernetesAPIObjectArgs_Req_DEFAULT *nika_operator.ListKubernetesAPIObjectRequest

func (p *ListKubernetesAPIObjectArgs) GetReq() *nika_operator.ListKubernetesAPIObjectRequest {
	if !p.IsSetReq() {
		return ListKubernetesAPIObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListKubernetesAPIObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListKubernetesAPIObjectResult struct {
	Success *nika_operator.ListListKubernetesAPIObjectResponse
}

var ListKubernetesAPIObjectResult_Success_DEFAULT *nika_operator.ListListKubernetesAPIObjectResponse

func (p *ListKubernetesAPIObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListKubernetesAPIObjectResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListKubernetesAPIObjectResult) Unmarshal(in []byte) error {
	msg := new(nika_operator.ListListKubernetesAPIObjectResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListKubernetesAPIObjectResult) GetSuccess() *nika_operator.ListListKubernetesAPIObjectResponse {
	if !p.IsSetSuccess() {
		return ListKubernetesAPIObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListKubernetesAPIObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_operator.ListListKubernetesAPIObjectResponse)
}

func (p *ListKubernetesAPIObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Exec(ctx context.Context, Req *nika_operator.ExecRequest) (r *nika_operator.ExecResponse, err error) {
	var _args ExecArgs
	_args.Req = Req
	var _result ExecResult
	if err = p.c.Call(ctx, "Exec", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetExecRecord(ctx context.Context, Req *nika_operator.GetExecRecordRequest) (r *nika_operator.GetExecRecordResponse, err error) {
	var _args GetExecRecordArgs
	_args.Req = Req
	var _result GetExecRecordResult
	if err = p.c.Call(ctx, "GetExecRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListExecRecordByAppIDAndEnvNameAndCmd(ctx context.Context, Req *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdRequest) (r *nika_operator.ListExecRecordByAppIDAndEnvNameAndCmdResponse, err error) {
	var _args ListExecRecordByAppIDAndEnvNameAndCmdArgs
	_args.Req = Req
	var _result ListExecRecordByAppIDAndEnvNameAndCmdResult
	if err = p.c.Call(ctx, "ListExecRecordByAppIDAndEnvNameAndCmd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListKubernetesAPIObject(ctx context.Context, Req *nika_operator.ListKubernetesAPIObjectRequest) (r *nika_operator.ListListKubernetesAPIObjectResponse, err error) {
	var _args ListKubernetesAPIObjectArgs
	_args.Req = Req
	var _result ListKubernetesAPIObjectResult
	if err = p.c.Call(ctx, "ListKubernetesAPIObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
