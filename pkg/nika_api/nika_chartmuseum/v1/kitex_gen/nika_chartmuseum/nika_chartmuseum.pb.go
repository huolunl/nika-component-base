// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: nika_chartmuseum.proto

package nika_chartmuseum

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteChartRequest) Reset() {
	*x = DeleteChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartRequest) ProtoMessage() {}

func (x *DeleteChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartRequest.ProtoReflect.Descriptor instead.
func (*DeleteChartRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteChartRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteChartRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeleteChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteChartResponse) Reset() {
	*x = DeleteChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartResponse) ProtoMessage() {}

func (x *DeleteChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartResponse.ProtoReflect.Descriptor instead.
func (*DeleteChartResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteChartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadProvenanceFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadProvenanceFileRequest) Reset() {
	*x = UploadProvenanceFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProvenanceFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProvenanceFileRequest) ProtoMessage() {}

func (x *UploadProvenanceFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProvenanceFileRequest.ProtoReflect.Descriptor instead.
func (*UploadProvenanceFileRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{2}
}

func (x *UploadProvenanceFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadProvenanceFileRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadProvenanceFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UploadProvenanceFileResponse) Reset() {
	*x = UploadProvenanceFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProvenanceFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProvenanceFileResponse) ProtoMessage() {}

func (x *UploadProvenanceFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProvenanceFileResponse.ProtoReflect.Descriptor instead.
func (*UploadProvenanceFileResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{3}
}

func (x *UploadProvenanceFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetChartByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetChartByNameRequest) Reset() {
	*x = GetChartByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartByNameRequest) ProtoMessage() {}

func (x *GetChartByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartByNameRequest.ProtoReflect.Descriptor instead.
func (*GetChartByNameRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{4}
}

func (x *GetChartByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetChartByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts []*Chart `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *GetChartByNameResponse) Reset() {
	*x = GetChartByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartByNameResponse) ProtoMessage() {}

func (x *GetChartByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartByNameResponse.ProtoReflect.Descriptor instead.
func (*GetChartByNameResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{5}
}

func (x *GetChartByNameResponse) GetCharts() []*Chart {
	if x != nil {
		return x.Charts
	}
	return nil
}

type GetChartByNameAndVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetChartByNameAndVersionRequest) Reset() {
	*x = GetChartByNameAndVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartByNameAndVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartByNameAndVersionRequest) ProtoMessage() {}

func (x *GetChartByNameAndVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartByNameAndVersionRequest.ProtoReflect.Descriptor instead.
func (*GetChartByNameAndVersionRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{6}
}

func (x *GetChartByNameAndVersionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChartByNameAndVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetChartByNameAndVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chart *Chart `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *GetChartByNameAndVersionResponse) Reset() {
	*x = GetChartByNameAndVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartByNameAndVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartByNameAndVersionResponse) ProtoMessage() {}

func (x *GetChartByNameAndVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartByNameAndVersionResponse.ProtoReflect.Descriptor instead.
func (*GetChartByNameAndVersionResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{7}
}

func (x *GetChartByNameAndVersionResponse) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

type PageChartListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageChartListRequest) Reset() {
	*x = PageChartListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageChartListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageChartListRequest) ProtoMessage() {}

func (x *PageChartListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageChartListRequest.ProtoReflect.Descriptor instead.
func (*PageChartListRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{8}
}

func (x *PageChartListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageChartListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PageChartListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartsMap map[string]*Charts `protobuf:"bytes,1,rep,name=charts_map,json=chartsMap,proto3" json:"charts_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PageChartListResponse) Reset() {
	*x = PageChartListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageChartListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageChartListResponse) ProtoMessage() {}

func (x *PageChartListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageChartListResponse.ProtoReflect.Descriptor instead.
func (*PageChartListResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{9}
}

func (x *PageChartListResponse) GetChartsMap() map[string]*Charts {
	if x != nil {
		return x.ChartsMap
	}
	return nil
}

type UploadChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadChartRequest) Reset() {
	*x = UploadChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChartRequest) ProtoMessage() {}

func (x *UploadChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChartRequest.ProtoReflect.Descriptor instead.
func (*UploadChartRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{10}
}

func (x *UploadChartRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UploadChartResponse) Reset() {
	*x = UploadChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChartResponse) ProtoMessage() {}

func (x *UploadChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChartResponse.ProtoReflect.Descriptor instead.
func (*UploadChartResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{11}
}

func (x *UploadChartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DescribeChartVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DescribeChartVersionRequest) Reset() {
	*x = DescribeChartVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChartVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChartVersionRequest) ProtoMessage() {}

func (x *DescribeChartVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChartVersionRequest.ProtoReflect.Descriptor instead.
func (*DescribeChartVersionRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeChartVersionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeChartVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DescribeChartVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AppVersion  string   `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Type        string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Urls        []string `protobuf:"bytes,6,rep,name=urls,proto3" json:"urls,omitempty"`
	Created     string   `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	Digest      string   `protobuf:"bytes,8,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *DescribeChartVersionResponse) Reset() {
	*x = DescribeChartVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChartVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChartVersionResponse) ProtoMessage() {}

func (x *DescribeChartVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChartVersionResponse.ProtoReflect.Descriptor instead.
func (*DescribeChartVersionResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeChartVersionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *DescribeChartVersionResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *DescribeChartVersionResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type CheckChartIsExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CheckChartIsExistRequest) Reset() {
	*x = CheckChartIsExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChartIsExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChartIsExistRequest) ProtoMessage() {}

func (x *CheckChartIsExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChartIsExistRequest.ProtoReflect.Descriptor instead.
func (*CheckChartIsExistRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{14}
}

func (x *CheckChartIsExistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CheckChartIsExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CheckChartIsExistResponse) Reset() {
	*x = CheckChartIsExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChartIsExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChartIsExistResponse) ProtoMessage() {}

func (x *CheckChartIsExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChartIsExistResponse.ProtoReflect.Descriptor instead.
func (*CheckChartIsExistResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{15}
}

func (x *CheckChartIsExistResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CheckChartVersionIsExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CheckChartVersionIsExistRequest) Reset() {
	*x = CheckChartVersionIsExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChartVersionIsExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChartVersionIsExistRequest) ProtoMessage() {}

func (x *CheckChartVersionIsExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChartVersionIsExistRequest.ProtoReflect.Descriptor instead.
func (*CheckChartVersionIsExistRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{16}
}

func (x *CheckChartVersionIsExistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckChartVersionIsExistRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CheckChartVersionIsExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CheckChartVersionIsExistResponse) Reset() {
	*x = CheckChartVersionIsExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChartVersionIsExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChartVersionIsExistResponse) ProtoMessage() {}

func (x *CheckChartVersionIsExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChartVersionIsExistResponse.ProtoReflect.Descriptor instead.
func (*CheckChartVersionIsExistResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{17}
}

func (x *CheckChartVersionIsExistResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ListChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListChartRequest) Reset() {
	*x = ListChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartRequest) ProtoMessage() {}

func (x *ListChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartRequest.ProtoReflect.Descriptor instead.
func (*ListChartRequest) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{18}
}

type ListChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartsMap map[string]*Charts `protobuf:"bytes,1,rep,name=charts_map,json=chartsMap,proto3" json:"charts_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListChartResponse) Reset() {
	*x = ListChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartResponse) ProtoMessage() {}

func (x *ListChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartResponse.ProtoReflect.Descriptor instead.
func (*ListChartResponse) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{19}
}

func (x *ListChartResponse) GetChartsMap() map[string]*Charts {
	if x != nil {
		return x.ChartsMap
	}
	return nil
}

type Charts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts []*Chart `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *Charts) Reset() {
	*x = Charts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charts) ProtoMessage() {}

func (x *Charts) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charts.ProtoReflect.Descriptor instead.
func (*Charts) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{20}
}

func (x *Charts) GetCharts() []*Chart {
	if x != nil {
		return x.Charts
	}
	return nil
}

type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Home        string         `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`
	Sources     []string       `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Version     string         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Description string         `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Maintainers []*Maintainers `protobuf:"bytes,6,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	Engine      string         `protobuf:"bytes,7,opt,name=engine,proto3" json:"engine,omitempty"`
	Icon        string         `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	Urls        []string       `protobuf:"bytes,9,rep,name=urls,proto3" json:"urls,omitempty"`
	Created     string         `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	Digest      string         `protobuf:"bytes,11,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{21}
}

func (x *Chart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chart) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *Chart) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Chart) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Chart) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Chart) GetMaintainers() []*Maintainers {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *Chart) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Chart) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Chart) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Chart) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Chart) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type Maintainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Maintainers) Reset() {
	*x = Maintainers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nika_chartmuseum_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainers) ProtoMessage() {}

func (x *Maintainers) ProtoReflect() protoreflect.Message {
	mi := &file_nika_chartmuseum_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainers.ProtoReflect.Descriptor instead.
func (*Maintainers) Descriptor() ([]byte, []int) {
	return file_nika_chartmuseum_proto_rawDescGZIP(), []int{22}
}

func (x *Maintainers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Maintainers) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

var File_nika_chartmuseum_proto protoreflect.FileDescriptor

var file_nika_chartmuseum_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a,
	0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a,
	0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0x4f,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x40, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x22, 0x47, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x50,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x45, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x28, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x13, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x1b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x1c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x45, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x28, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0xa7, 0x02, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x32,
	0x85, 0x06, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x15, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x64, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6f, 0x6c, 0x75, 0x6e, 0x6c, 0x2f, 0x6e, 0x69,
	0x6b, 0x61, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x69, 0x6b, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65, 0x75, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x6b,
	0x61, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65, 0x75, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nika_chartmuseum_proto_rawDescOnce sync.Once
	file_nika_chartmuseum_proto_rawDescData = file_nika_chartmuseum_proto_rawDesc
)

func file_nika_chartmuseum_proto_rawDescGZIP() []byte {
	file_nika_chartmuseum_proto_rawDescOnce.Do(func() {
		file_nika_chartmuseum_proto_rawDescData = protoimpl.X.CompressGZIP(file_nika_chartmuseum_proto_rawDescData)
	})
	return file_nika_chartmuseum_proto_rawDescData
}

var file_nika_chartmuseum_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_nika_chartmuseum_proto_goTypes = []interface{}{
	(*DeleteChartRequest)(nil),               // 0: DeleteChartRequest
	(*DeleteChartResponse)(nil),              // 1: DeleteChartResponse
	(*UploadProvenanceFileRequest)(nil),      // 2: UploadProvenanceFileRequest
	(*UploadProvenanceFileResponse)(nil),     // 3: UploadProvenanceFileResponse
	(*GetChartByNameRequest)(nil),            // 4: GetChartByNameRequest
	(*GetChartByNameResponse)(nil),           // 5: GetChartByNameResponse
	(*GetChartByNameAndVersionRequest)(nil),  // 6: GetChartByNameAndVersionRequest
	(*GetChartByNameAndVersionResponse)(nil), // 7: GetChartByNameAndVersionResponse
	(*PageChartListRequest)(nil),             // 8: PageChartListRequest
	(*PageChartListResponse)(nil),            // 9: PageChartListResponse
	(*UploadChartRequest)(nil),               // 10: UploadChartRequest
	(*UploadChartResponse)(nil),              // 11: UploadChartResponse
	(*DescribeChartVersionRequest)(nil),      // 12: DescribeChartVersionRequest
	(*DescribeChartVersionResponse)(nil),     // 13: DescribeChartVersionResponse
	(*CheckChartIsExistRequest)(nil),         // 14: CheckChartIsExistRequest
	(*CheckChartIsExistResponse)(nil),        // 15: CheckChartIsExistResponse
	(*CheckChartVersionIsExistRequest)(nil),  // 16: CheckChartVersionIsExistRequest
	(*CheckChartVersionIsExistResponse)(nil), // 17: CheckChartVersionIsExistResponse
	(*ListChartRequest)(nil),                 // 18: ListChartRequest
	(*ListChartResponse)(nil),                // 19: ListChartResponse
	(*Charts)(nil),                           // 20: Charts
	(*Chart)(nil),                            // 21: Chart
	(*Maintainers)(nil),                      // 22: Maintainers
	nil,                                      // 23: PageChartListResponse.ChartsMapEntry
	nil,                                      // 24: ListChartResponse.ChartsMapEntry
}
var file_nika_chartmuseum_proto_depIdxs = []int32{
	21, // 0: GetChartByNameResponse.charts:type_name -> Chart
	21, // 1: GetChartByNameAndVersionResponse.chart:type_name -> Chart
	23, // 2: PageChartListResponse.charts_map:type_name -> PageChartListResponse.ChartsMapEntry
	24, // 3: ListChartResponse.charts_map:type_name -> ListChartResponse.ChartsMapEntry
	21, // 4: Charts.charts:type_name -> Chart
	22, // 5: Chart.maintainers:type_name -> Maintainers
	20, // 6: PageChartListResponse.ChartsMapEntry.value:type_name -> Charts
	20, // 7: ListChartResponse.ChartsMapEntry.value:type_name -> Charts
	18, // 8: ChartService.ListChart:input_type -> ListChartRequest
	0,  // 9: ChartService.DeleteChart:input_type -> DeleteChartRequest
	2,  // 10: ChartService.UploadProvenanceFile:input_type -> UploadProvenanceFileRequest
	4,  // 11: ChartService.GetChartByName:input_type -> GetChartByNameRequest
	6,  // 12: ChartService.GetChartByNameAndVersion:input_type -> GetChartByNameAndVersionRequest
	8,  // 13: ChartService.PageChartList:input_type -> PageChartListRequest
	10, // 14: ChartService.UploadChart:input_type -> UploadChartRequest
	12, // 15: ChartService.DescribeChartVersion:input_type -> DescribeChartVersionRequest
	14, // 16: ChartService.CheckChartIsExist:input_type -> CheckChartIsExistRequest
	16, // 17: ChartService.CheckChartVersionIsExist:input_type -> CheckChartVersionIsExistRequest
	19, // 18: ChartService.ListChart:output_type -> ListChartResponse
	1,  // 19: ChartService.DeleteChart:output_type -> DeleteChartResponse
	3,  // 20: ChartService.UploadProvenanceFile:output_type -> UploadProvenanceFileResponse
	5,  // 21: ChartService.GetChartByName:output_type -> GetChartByNameResponse
	7,  // 22: ChartService.GetChartByNameAndVersion:output_type -> GetChartByNameAndVersionResponse
	9,  // 23: ChartService.PageChartList:output_type -> PageChartListResponse
	11, // 24: ChartService.UploadChart:output_type -> UploadChartResponse
	13, // 25: ChartService.DescribeChartVersion:output_type -> DescribeChartVersionResponse
	15, // 26: ChartService.CheckChartIsExist:output_type -> CheckChartIsExistResponse
	17, // 27: ChartService.CheckChartVersionIsExist:output_type -> CheckChartVersionIsExistResponse
	18, // [18:28] is the sub-list for method output_type
	8,  // [8:18] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_nika_chartmuseum_proto_init() }
func file_nika_chartmuseum_proto_init() {
	if File_nika_chartmuseum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nika_chartmuseum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProvenanceFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProvenanceFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartByNameAndVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartByNameAndVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageChartListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageChartListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChartVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChartVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChartIsExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChartIsExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChartVersionIsExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChartVersionIsExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nika_chartmuseum_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nika_chartmuseum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nika_chartmuseum_proto_goTypes,
		DependencyIndexes: file_nika_chartmuseum_proto_depIdxs,
		MessageInfos:      file_nika_chartmuseum_proto_msgTypes,
	}.Build()
	File_nika_chartmuseum_proto = out.File
	file_nika_chartmuseum_proto_rawDesc = nil
	file_nika_chartmuseum_proto_goTypes = nil
	file_nika_chartmuseum_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.2.1. DO NOT EDIT.

type ChartService interface {
	ListChart(ctx context.Context, req *ListChartRequest) (res *ListChartResponse, err error)
	DeleteChart(ctx context.Context, req *DeleteChartRequest) (res *DeleteChartResponse, err error)
	UploadProvenanceFile(ctx context.Context, req *UploadProvenanceFileRequest) (res *UploadProvenanceFileResponse, err error)
	GetChartByName(ctx context.Context, req *GetChartByNameRequest) (res *GetChartByNameResponse, err error)
	GetChartByNameAndVersion(ctx context.Context, req *GetChartByNameAndVersionRequest) (res *GetChartByNameAndVersionResponse, err error)
	PageChartList(ctx context.Context, req *PageChartListRequest) (res *PageChartListResponse, err error)
	UploadChart(ctx context.Context, req *UploadChartRequest) (res *UploadChartResponse, err error)
	DescribeChartVersion(ctx context.Context, req *DescribeChartVersionRequest) (res *DescribeChartVersionResponse, err error)
	CheckChartIsExist(ctx context.Context, req *CheckChartIsExistRequest) (res *CheckChartIsExistResponse, err error)
	CheckChartVersionIsExist(ctx context.Context, req *CheckChartVersionIsExistRequest) (res *CheckChartVersionIsExistResponse, err error)
}
