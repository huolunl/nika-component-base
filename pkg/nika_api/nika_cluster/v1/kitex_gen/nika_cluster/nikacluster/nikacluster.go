// Code generated by Kitex v0.2.1. DO NOT EDIT.

package nikacluster

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/huolunl/nika-component-base/pkg/nika_api/nika_cluster/v1/kitex_gen/nika_cluster"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return nikaClusterServiceInfo
}

var nikaClusterServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "NikaCluster"
	handlerType := (*nika_cluster.NikaCluster)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateCluster": kitex.NewMethodInfo(createClusterHandler, newCreateClusterArgs, newCreateClusterResult, false),
		"GetCluster":    kitex.NewMethodInfo(getClusterHandler, newGetClusterArgs, newGetClusterResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func createClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_cluster.CreateClusterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_cluster.NikaCluster).CreateCluster(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateClusterArgs:
		success, err := handler.(nika_cluster.NikaCluster).CreateCluster(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateClusterResult)
		realResult.Success = success
	}
	return nil
}
func newCreateClusterArgs() interface{} {
	return &CreateClusterArgs{}
}

func newCreateClusterResult() interface{} {
	return &CreateClusterResult{}
}

type CreateClusterArgs struct {
	Req *nika_cluster.CreateClusterRequest
}

func (p *CreateClusterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateClusterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateClusterArgs) Unmarshal(in []byte) error {
	msg := new(nika_cluster.CreateClusterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateClusterArgs_Req_DEFAULT *nika_cluster.CreateClusterRequest

func (p *CreateClusterArgs) GetReq() *nika_cluster.CreateClusterRequest {
	if !p.IsSetReq() {
		return CreateClusterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateClusterResult struct {
	Success *nika_cluster.CreateClusterResponse
}

var CreateClusterResult_Success_DEFAULT *nika_cluster.CreateClusterResponse

func (p *CreateClusterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateClusterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateClusterResult) Unmarshal(in []byte) error {
	msg := new(nika_cluster.CreateClusterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateClusterResult) GetSuccess() *nika_cluster.CreateClusterResponse {
	if !p.IsSetSuccess() {
		return CreateClusterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_cluster.CreateClusterResponse)
}

func (p *CreateClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(nika_cluster.GetClusterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(nika_cluster.NikaCluster).GetCluster(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetClusterArgs:
		success, err := handler.(nika_cluster.NikaCluster).GetCluster(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetClusterResult)
		realResult.Success = success
	}
	return nil
}
func newGetClusterArgs() interface{} {
	return &GetClusterArgs{}
}

func newGetClusterResult() interface{} {
	return &GetClusterResult{}
}

type GetClusterArgs struct {
	Req *nika_cluster.GetClusterRequest
}

func (p *GetClusterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetClusterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetClusterArgs) Unmarshal(in []byte) error {
	msg := new(nika_cluster.GetClusterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetClusterArgs_Req_DEFAULT *nika_cluster.GetClusterRequest

func (p *GetClusterArgs) GetReq() *nika_cluster.GetClusterRequest {
	if !p.IsSetReq() {
		return GetClusterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetClusterResult struct {
	Success *nika_cluster.GetClusterResponse
}

var GetClusterResult_Success_DEFAULT *nika_cluster.GetClusterResponse

func (p *GetClusterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetClusterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetClusterResult) Unmarshal(in []byte) error {
	msg := new(nika_cluster.GetClusterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetClusterResult) GetSuccess() *nika_cluster.GetClusterResponse {
	if !p.IsSetSuccess() {
		return GetClusterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*nika_cluster.GetClusterResponse)
}

func (p *GetClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCluster(ctx context.Context, Req *nika_cluster.CreateClusterRequest) (r *nika_cluster.CreateClusterResponse, err error) {
	var _args CreateClusterArgs
	_args.Req = Req
	var _result CreateClusterResult
	if err = p.c.Call(ctx, "CreateCluster", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCluster(ctx context.Context, Req *nika_cluster.GetClusterRequest) (r *nika_cluster.GetClusterResponse, err error) {
	var _args GetClusterArgs
	_args.Req = Req
	var _result GetClusterResult
	if err = p.c.Call(ctx, "GetCluster", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
