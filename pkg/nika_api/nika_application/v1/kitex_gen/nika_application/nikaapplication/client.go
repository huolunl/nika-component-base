// Code generated by Kitex v0.2.1. DO NOT EDIT.

package nikaapplication

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/huolunl/nika-component-base/pkg/nika_api/nika_application/v1/kitex_gen/nika_application"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateApplication(ctx context.Context, Req *nika_application.CreateApplicationRequest, callOptions ...callopt.Option) (r *nika_application.CreateApplicationResponse, err error)
	UpdateApplication(ctx context.Context, Req *nika_application.UpdateApplicationRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error)
	GetApplication(ctx context.Context, Req *nika_application.GetApplicationRequest, callOptions ...callopt.Option) (r *nika_application.GetApplicationResponse, err error)
	ListApplication(ctx context.Context, Req *nika_application.ListApplicationRequest, callOptions ...callopt.Option) (r *nika_application.ListApplicationResponse, err error)
	DeleteApplication(ctx context.Context, Req *nika_application.GetApplicationRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error)
	PatchEnv(ctx context.Context, Req *nika_application.PatchEnvRequest, callOptions ...callopt.Option) (r *nika_application.GetApplicationResponse, err error)
	CreateProject(ctx context.Context, Req *nika_application.CreateProjectRequest, callOptions ...callopt.Option) (r *nika_application.Project, err error)
	UpdateProject(ctx context.Context, Req *nika_application.Project, callOptions ...callopt.Option) (r *nika_application.Project, err error)
	GetProject(ctx context.Context, Req *nika_application.GetProjectRequest, callOptions ...callopt.Option) (r *nika_application.Project, err error)
	ListProject(ctx context.Context, Req *nika_application.ListProjectRequest, callOptions ...callopt.Option) (r *nika_application.Projects, err error)
	DeleteProject(ctx context.Context, Req *nika_application.GetProjectRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error)
	CreateWebserver(ctx context.Context, Req *nika_application.CreateWebserverRequest, callOptions ...callopt.Option) (r *nika_application.CreateWebserverResponse, err error)
	PatchEnvValueForWebServer(ctx context.Context, Req *nika_application.PatchEnvValueForWebServerRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kNikaApplicationClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kNikaApplicationClient struct {
	*kClient
}

func (p *kNikaApplicationClient) CreateApplication(ctx context.Context, Req *nika_application.CreateApplicationRequest, callOptions ...callopt.Option) (r *nika_application.CreateApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateApplication(ctx, Req)
}

func (p *kNikaApplicationClient) UpdateApplication(ctx context.Context, Req *nika_application.UpdateApplicationRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateApplication(ctx, Req)
}

func (p *kNikaApplicationClient) GetApplication(ctx context.Context, Req *nika_application.GetApplicationRequest, callOptions ...callopt.Option) (r *nika_application.GetApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetApplication(ctx, Req)
}

func (p *kNikaApplicationClient) ListApplication(ctx context.Context, Req *nika_application.ListApplicationRequest, callOptions ...callopt.Option) (r *nika_application.ListApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListApplication(ctx, Req)
}

func (p *kNikaApplicationClient) DeleteApplication(ctx context.Context, Req *nika_application.GetApplicationRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteApplication(ctx, Req)
}

func (p *kNikaApplicationClient) PatchEnv(ctx context.Context, Req *nika_application.PatchEnvRequest, callOptions ...callopt.Option) (r *nika_application.GetApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchEnv(ctx, Req)
}

func (p *kNikaApplicationClient) CreateProject(ctx context.Context, Req *nika_application.CreateProjectRequest, callOptions ...callopt.Option) (r *nika_application.Project, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateProject(ctx, Req)
}

func (p *kNikaApplicationClient) UpdateProject(ctx context.Context, Req *nika_application.Project, callOptions ...callopt.Option) (r *nika_application.Project, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProject(ctx, Req)
}

func (p *kNikaApplicationClient) GetProject(ctx context.Context, Req *nika_application.GetProjectRequest, callOptions ...callopt.Option) (r *nika_application.Project, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProject(ctx, Req)
}

func (p *kNikaApplicationClient) ListProject(ctx context.Context, Req *nika_application.ListProjectRequest, callOptions ...callopt.Option) (r *nika_application.Projects, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListProject(ctx, Req)
}

func (p *kNikaApplicationClient) DeleteProject(ctx context.Context, Req *nika_application.GetProjectRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProject(ctx, Req)
}

func (p *kNikaApplicationClient) CreateWebserver(ctx context.Context, Req *nika_application.CreateWebserverRequest, callOptions ...callopt.Option) (r *nika_application.CreateWebserverResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateWebserver(ctx, Req)
}

func (p *kNikaApplicationClient) PatchEnvValueForWebServer(ctx context.Context, Req *nika_application.PatchEnvValueForWebServerRequest, callOptions ...callopt.Option) (r *nika_application.UpdateApplicationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchEnvValueForWebServer(ctx, Req)
}
