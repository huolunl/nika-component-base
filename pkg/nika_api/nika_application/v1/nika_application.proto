syntax = "proto3";
option go_package = "nika_application";

message CreateApplicationRequest{
  string git = 1;
  string type = 2;
  uint32 status = 3;
  repeated uint64 userIDList = 4;
  repeated string projectNameList = 5;
  string tenant = 6;
  string description = 7;
  repeated Environment Environments = 8;
  string name = 9;
  string drone = 10;
  string sonarQube = 11;
}
message CreateApplicationResponse{
  uint64 appID = 1;
}

message AppChart {
   string Repository = 1;
   string URL = 2;
   string Name = 3;
   string Version = 4;
}
message Environment {
  string Name = 1;
  string Value=2;
   string Namespace =3;
   string Release=4;
   AppChart Chart=5;
   string ValueTemplate=6;
   uint64 ClusterID = 7;
}

message GetApplicationRequest{
  uint64 appID = 1;
}
message GetApplicationResponse{
    CreateApplicationRequest app = 1;
    string createAt =2;
    string updateAt = 3;
    uint64 appID =4;
}

message UpdateApplicationRequest {
  CreateApplicationRequest app = 1;
  uint64 appID = 2;
}
message UpdateApplicationResponse {
}
message ListApplicationRequest{
  string tenant = 1;
  string project = 2;
  int64 offset = 3;
  int64 limit = 4;
}
message ListApplicationResponse{
  repeated GetApplicationResponse applications = 1;
}

message Project {
  uint64 ID = 1;
  string project = 2;
  string description = 3;
  string tenant =4;
}
message Projects {
  repeated Project projects = 1;
}
message CreateProjectRequest{
  string project = 1;
  string description = 2;
  string tenant =3;
}
message GetProjectRequest{
  uint64 ID = 1;
}
message ListProjectRequest{
  string tenant = 1;
  int64 offset = 3;
  int64 limit = 4;
}
message PatchEnvRequest {
    repeated Environment Environments =1 ;
    uint64 ID = 2;
}

message Image {
  string Repository = 1;
  string Tag = 2;
}
message SecretName {
  string Name = 1;
}
message ServiceAccount{
  bool create = 1;
}

message Service {
  string type = 1;
  repeated Ports Ports = 2;
}
message Ports {
  uint32 Port = 1;
  uint32 NodePort = 2;
  string Protocol = 3;
}

message Path {
  string Name = 1;
  string PathType = 2;
}
message Ingress {
  bool Enable = 1;
  string className = 2;
  repeated Annotation Annotations = 3;
  repeated Tls Tls = 4;
  repeated Host Hosts = 5;
}
message Host {
  string name = 1;
  uint64 port = 2;
  repeated Path path = 3;
}

message Tls {
  repeated string Hosts = 1;
  string SecretName = 2;
}
message Annotation {
  map<string,string> Annotation = 1;
}
message Limit {
  string CPU = 1;
  string Memory = 2;
}
message Request {
  string CPU = 1;
  string Memory = 2;
}
message TcpSocket {
  uint32 port = 1;
}
message Resources {
  Limit Limit = 1;
  Request Request =2;
}
message ProbeConfig {
    TcpSocket TcpSocket = 1;
    uint64 InitialDelaySeconds =2;
    uint64 PeriodSeconds = 3;
}
message Probe {
  bool Enable = 1;
  ProbeConfig ProbeConfig = 2;

}
message Webserver {
  uint32 ReplicaCount =1;
  Image Image = 2;
  repeated SecretName ImagePullSecrets =3;
  ServiceAccount ServiceAccount = 4;
  repeated Service Services = 5;
  Ingress Ingress = 6;
  Resources Resources = 7;
  Probe LivenessProbe = 8;
  Probe ReadinessProbe = 9;
  map<string,string> ConfigMap = 10;
  map<string,string> Secret = 11;
  map<string,string> Env = 12;
  PersistentVolumeClaim PersistentVolumeClaim = 13;
  string SchedulerName = 14;
  string SecretMountPath = 15;
  string ConfigMapMountPath = 16;
  string PersistentVolumeClaimMountPath = 17;

}
message PersistentVolumeClaim {
  string Storage = 1;
}
message TemplateWebserverChart{
  string name = 1;
  string Description = 2;
  string AppVersion = 3;
  string Version = 4;
}
message CreateWebserverRequest{
    Webserver Webserver = 1;
    TemplateWebserverChart TemplateWebserverChart = 2;
}
message CreateWebserverResponse{
  bytes data = 1;
}

message PatchEnvValueForWebServerRequest{
  uint64 appID = 1;
  string env = 2;
  Webserver Webserver = 3;
}

service NikaApplication{
  rpc CreateApplication(CreateApplicationRequest) returns (CreateApplicationResponse) {}
  rpc UpdateApplication(UpdateApplicationRequest) returns (UpdateApplicationResponse) {}
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {}
  rpc ListApplication(ListApplicationRequest) returns (ListApplicationResponse) {}
  rpc DeleteApplication(GetApplicationRequest) returns (UpdateApplicationResponse) {}
  rpc PatchEnv(PatchEnvRequest) returns(GetApplicationResponse){}

  rpc CreateProject(CreateProjectRequest) returns (Project) {}
  rpc UpdateProject(Project) returns (Project) {}
  rpc GetProject(GetProjectRequest) returns (Project) {}
  rpc ListProject(ListProjectRequest) returns (Projects) {}
  rpc DeleteProject(GetProjectRequest) returns (UpdateApplicationResponse) {}

  rpc CreateWebserver(CreateWebserverRequest) returns(CreateWebserverResponse){}
  rpc PatchEnvValueForWebServer(PatchEnvValueForWebServerRequest) returns(UpdateApplicationResponse){}

}
